from aiogram import F, types, Router, html
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from bot.keyboards.user_keyboards import (
    get_main_kb, get_main_ikb, get_lt_ikb, get_pol_ikb, get_cartype_ikb
)
from bot.response.get_response import BorderInfo

from bot.database.database import Database


router = Router()
db = Database()


@router.message(CommandStart())
async def cmd_start(msg: types.Message):
    reply_text = (
        '‚ùó<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¢–° –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏ '
        '–ø–µ—Ä–µ–¥ –≤—ä–µ–∑–¥–æ–º –≤ –∑–æ–Ω—É –æ–∂–∏–¥–∞–Ω–∏—è.‚ùó\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –≤–≤–µ–¥–∏—Ç–µ /stats –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.'
    )

    user_id = msg.from_user.id 
    username = msg.from_user.username

    if not db.user_exists(user_id):
        db.add_user(user_id, username)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {username} ({user_id})")

    await msg.answer(
        text=reply_text,
        parse_mode='HTML',
        reply_markup=get_main_kb()
    )


@router.message(F.text == '–ü–æ–º–æ—â—å üîé')
@router.message(Command('help'))
async def cmd_help(msg: types.Message):
    reply_text = (
        "<b>/start</b> - <em>—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</em>\n"
        "<b>/help</b> - <em>—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</em>\n"
        "<b>/stats</b> - <em>—É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ª—é–±–æ–π –ó–û</em>"
    )
    await msg.answer(
        text=reply_text,
        parse_mode='HTML'
    )


@router.message(F.text == '–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è')
@router.message(Command('stats'))
async def cmd_stats(msg: types.Message):
    reply_text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
    await msg.answer(
        text=reply_text,
        parse_mode='HTML',
        reply_markup=get_main_ikb()
    )


async def send_queue_info(msg: types.Message, name: str, vehicle_type: str):
    border_info = BorderInfo()
    if vehicle_type == 'Car':
        queue_info = border_info.get_car_queue(name)
    else:
        queue_info = border_info.get_truck_queue(name)
    await msg.answer(
        text=queue_info,
        parse_mode='HTML'
    )


async def send_best_queue_info(msg: types.Message, vehicle_type: str):
    border_info = BorderInfo()
    if vehicle_type == 'Car':
        queue_info = border_info.get_best_car()
    else:
        queue_info = border_info.get_best_truck()
    await msg.answer(
        text=queue_info,
        parse_mode='HTML'
    )


@router.message(F.text == '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ –ö–∞–º–µ–Ω–Ω—ã–π –ª–æ–≥ üöó')
@router.message(Command('kamlog_car'))
async def cmd_kamlog_car(msg: types.Message):
    await send_queue_info(msg, '–ö–∞–º–µ–Ω–Ω—ã–π –õ–æ–≥', 'Car')


@router.message(F.text == '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ –ö–∞–º–µ–Ω–Ω—ã–π –ª–æ–≥ üõª')
@router.message(Command('kamlog_truck'))
async def cmd_kamlog_truck(msg: types.Message):
    await send_queue_info(msg, '–ö–∞–º–µ–Ω–Ω—ã–π –õ–æ–≥', 'Truck')


@router.message(F.text == '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ –ë–µ–Ω—è–∫–æ–Ω–∏ üöó')
@router.message(Command('ben_car'))
async def cmd_ben_car(msg: types.Message):
    await send_queue_info(msg, '–ë–µ–Ω—è–∫–æ–Ω–∏', 'Car')


@router.message(F.text == '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ –ë–µ–Ω—è–∫–æ–Ω–∏ üõª')
@router.message(Command('ben_truck'))
async def cmd_ben_truck(msg: types.Message):
    await send_queue_info(msg, '–ë–µ–Ω—è–∫–æ–Ω–∏', 'Truck')


@router.message(F.text == '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ –ë—Ä–µ—Å—Ç üöó')
@router.message(Command('br_car'))
async def cmd_br_car(msg: types.Message):
    await send_queue_info(msg, '–ë—Ä–µ—Å—Ç', 'Car')


@router.message(F.text == '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ –ë—Ä–µ—Å—Ç üõª')
@router.message(Command('br_truck'))
async def cmd_br_truck(msg: types.Message):
    await send_queue_info(msg, '–ë—Ä–µ—Å—Ç', 'Truck')


@router.callback_query(lambda c: c.data in ["lt", "pol", "best_border"])
async def process_callback(callback_query: types.CallbackQuery):
    if callback_query.data == 'lt':
        await callback_query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥:', 
            reply_markup=get_lt_ikb()
        )
    elif callback_query.data == 'pol':
        await callback_query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥:', 
            reply_markup=get_pol_ikb()
        )
    elif callback_query.data == 'best_border':
        await callback_query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', 
            reply_markup=get_cartype_ikb('best')
        )
    await callback_query.answer()


@router.callback_query(lambda c: c.data in ["br", "kamlog", "ben"])
async def process_callback_second(callback_query: types.CallbackQuery):
    location_to_kb = {
        'kamlog': get_cartype_ikb('kamlog'),
        'ben': get_cartype_ikb('ben'),
        'br': get_cartype_ikb('br')
    }
    await callback_query.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', 
        reply_markup=location_to_kb[callback_query.data]
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data in [
    "car_br", "truck_br", "car_ben", "truck_ben", "car_kamlog", "truck_kamlog"
])
async def process_callback_third(callback_query: types.CallbackQuery):
    data_to_command = {
        'car_kamlog': cmd_kamlog_car,
        'truck_kamlog': cmd_kamlog_truck,
        'car_ben': cmd_ben_car,
        'truck_ben': cmd_ben_truck,
        'car_br': cmd_br_car,
        'truck_br': cmd_br_truck
    }
    command = data_to_command.get(callback_query.data)
    if command:
        await command(callback_query.message)
    await callback_query.answer()


@router.callback_query(lambda c: c.data in ["best_car", "best_truck"])
async def process_callback_best(callback_query: types.CallbackQuery):
    vehicle_type = 'Car' if callback_query.data == 'best_car' else 'Truck'
    await send_best_queue_info(callback_query.message, vehicle_type)
    await callback_query.answer()


async def on_shutdown():
    db.close()