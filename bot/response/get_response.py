import requests
import datetime

class BorderInfo:
    def __init__(self):
        self.url = 'https://belarusborder.by/info/checkpoint?token=bts47d5f-6420-4f74-8f78-42e8e4370cc4'
        self.valid_checkpoints_car = ["–ë—Ä–µ—Å—Ç", "–ë–µ–Ω—è–∫–æ–Ω–∏", "–ö–∞–º–µ–Ω–Ω—ã–π –õ–æ–≥"]
        self.valid_checkpoints_truck = ['–ë–µ–Ω—è–∫–æ–Ω–∏', '–ö–∞–º–µ–Ω–Ω—ã–π –õ–æ–≥']

    def _fetch_data(self):
        try:
            response = requests.get(self.url)
            response.raise_for_status()
            return response.json()['result']
        except requests.RequestException as e:
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
            return None

    def _get_queue_info(self, name, vehicle_type):
        now = datetime.datetime.now()
        current_time = now.strftime('%H:%M')
        data = self._fetch_data()

        if data is None:
            return None

        for checkpoint in data:
            if checkpoint['name'] == name:
                count = checkpoint[f'count{vehicle_type}']
                return (
                    f"<b>{name}</b>: –ù–∞ <b>{current_time}</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {'–ª–µ–≥–∫–æ–≤—ã—Ö' if vehicle_type == 'Car' else '–≥—Ä—É–∑–æ–≤—ã—Ö'} –∞–≤—Ç–æ\n\n"
                    f"\t\t‚ö†Ô∏è —Ç–æ–ª—å–∫–æ –≤ –∑–æ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è - <b>{count}</b>\n"
                    f"\t\t‚è≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –≤ –ü–ü - <b>{count}</b>\n"
                    f"\t\tüïì –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π 24 —á–∞—Å–∞ –≤ –ü–ü - <b>{count}</b>\n\n"
                    "<em><b>–ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É!</b> –≠—Ç–æ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –≤ –∑–æ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è. ‚ö†Ô∏è</em>"
                )

        print(f'–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return None

    def get_car_queue(self, name):
        return self._get_queue_info(name, 'Car')

    def get_truck_queue(self, name):
        return self._get_queue_info(name, 'Truck')

    def _get_best_queue(self, valid_checkpoints, vehicle_type):
        now = datetime.datetime.now()
        current_time = now.strftime('%H:%M')
        data = self._fetch_data()

        if data is None:
            return None

        min_count = None
        best_checkpoint = None

        for checkpoint in data:
            if checkpoint['name'] in valid_checkpoints:
                count = checkpoint[f'count{vehicle_type}']
                if min_count is None or count < min_count:
                    min_count = count
                    best_checkpoint = checkpoint

        if best_checkpoint:
            return (
                f"–ù–∞ <b>{current_time}</b> —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –æ—á–µ—Ä–µ–¥—å "
                f"{'–ª–µ–≥–∫–æ–≤—ã—Ö' if vehicle_type == 'Car' else '–≥—Ä—É–∑–æ–≤—ã—Ö'} –º–∞—à–∏–Ω –≤ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ "
                f"<b>{best_checkpoint['name']}</b>: <b>{min_count}</b>."
            )
        return '–ü–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.'

    def get_best_car(self):
        return self._get_best_queue(self.valid_checkpoints_car, 'Car')

    def get_best_truck(self):
        return self._get_best_queue(self.valid_checkpoints_truck, 'Truck')
